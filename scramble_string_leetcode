//memo
class Solution {
public:
unordered_map<string,bool>mp;
bool solve(string s1,string s2)
{
    
    int n=s1.size();
    if(s1==s2)return true;
    if(s1.size()!=s2.size())
    return false;
    string key=s1+ "_"+ s2;
    if(mp.find(key)!=mp.end())
    return mp[key];
    bool result=false;
    //s1=gr/eat   s2=eat/rg (after swap) i=2
    for(int i=1;i<n;i++){
    bool swap=solve(s1.substr(0,i),s2.substr(n-i,i))&& solve(s1.substr(i,n-i),s2.substr(0,n-i));//substr(start,lengh)
    if(swap==true){
        result=true;
        break;
    }
    //s1=gr/eat   s2=rg/eat
    bool not_swap=solve(s1.substr(0,i),s2.substr(0,i))&&solve(s1.substr(i,n-i),s2.substr(i,n-i));
      if(not_swap==true){
        result= true;
        break;
    }}
    return mp[key]=result;
}
    bool isScramble(string &s1, string &s2) {
        mp.clear();
        return solve(s1,s2);
    }
};
