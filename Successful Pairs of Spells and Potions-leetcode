//using inbuilt STL lower_bound()
class Solution {
public:
    vector<int> successfulPairs(vector<int>& spells, vector<int>& potions, long long success) {
         int m = spells.size();
        
        int n = potions.size();
        
        sort(begin(potions), end(potions));
        
        int maxPotion = potions[n-1];
        
        vector<int> answer;
        
        
        for(int i = 0; i<m; i++) {
            
            int spell = spells[i];
            
            long long minPotion = ceil((1.0*success)/spell);
            
            if(minPotion > maxPotion) {
                answer.push_back(0);
                continue;
            }
            
            int index = lower_bound(begin(potions), end(potions), minPotion) - begin(potions);
            
            answer.push_back(n-index);
            
        }
        
        return answer;
    }
};
    
    
    
    
    
    //making our own lower bound function using binary search
    class Solution {
public:
int apnalower(int l,int r,int minPotion,vector<int>& potions)
{
    int possible;
    while(l<=r)
    {
        int mid=(l+r)/2;
        if(potions[mid]>=minPotion)
        {
          possible=mid;
          r=mid-1;
        }
        else
        {
            l=mid+1;
        }
    }
    return possible;
}
    vector<int> successfulPairs(vector<int>& spells, vector<int>& potions, long long success) {
         int m = spells.size();
        
        int n = potions.size();
        
        sort(begin(potions), end(potions));
        
        int maxPotion = potions[n-1];
        
        vector<int> answer;
        
        
        for(int i = 0; i<m; i++) {
            
            int spell = spells[i];
            
            long long minPotion = ceil((1.0*success)/spell);
            
            if(minPotion > maxPotion) {
                answer.push_back(0);
                continue;
            }
            
            int index = apnalower(0,n-1,minPotion,potions);
            // lower_bound(begin(potions), end(potions), minPotion) - begin(potions);
            
            answer.push_back(n-index);
            
        }
        
        return answer;
    }
};
    
